import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.stattools import adfuller
from pandas.plotting import autocorrelation_plot

# Example: Load a time series dataset (monthly sales data)
data = {
    'Date': pd.date_range(start='2020-01-01', periods=24, freq='M'),
    'Sales': [200, 220, 250, 270, 300, 320, 340, 360, 380, 390, 410, 420,
              430, 450, 470, 490, 510, 530, 550, 570, 590, 610, 630, 650]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Set 'Date' as the index
df.set_index('Date', inplace=True)

# Plot the time series data
plt.figure(figsize=(10, 6))
plt.plot(df['Sales'], label='Sales', color='blue')
plt.title('Monthly Sales Data')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.show()

# Step 1: Check if the time series is stationary (using ADF test)
result = adfuller(df['Sales'])
print("ADF Statistic:", result[0])
print("p-value:", result[1])

if result[1] <= 0.05:
    print("The time series is stationary.")
else:
    print("The time series is not stationary.")

# Step 2: Plot autocorrelation to determine q (order of MA)
autocorrelation_plot(df['Sales'])
plt.show()

# Step 3: Train ARIMA model (ARIMA(p, d, q))
# p = 1, d = 1, q = 1 are common choices, adjust as needed

# Train ARIMA model
model = ARIMA(df['Sales'], order=(1, 1, 1))
model_fit = model.fit()

# Print summary of the model
print(model_fit.summary())

# Step 4: Forecast the next 12 months
forecast = model_fit.forecast(steps=12)

# Plot the forecasted values
plt.figure(figsize=(10, 6))
plt.plot(df['Sales'], label='Actual Sales', color='blue')
plt.plot(pd.date_range(df.index[-1], periods=13, freq='M')[1:], forecast, label='Forecasted Sales', color='red', linestyle='--')
plt.title('Sales Forecast using ARIMA')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.show()
