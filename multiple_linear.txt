import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics

# Sample data for Multiple Linear Regression
# Let's assume we have 3 features (x1, x2, x3) to predict the target variable (y)

# Feature matrix (x1, x2, x3)
X = np.array([[1, 2, 3],
              [2, 3, 4],
              [3, 4, 5],
              [4, 5, 6],
              [5, 6, 7]])

# Target variable (y)
y = np.array([10, 20, 30, 40, 50])

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# Print the coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Calculate and print the model performance metrics
print("Mean Absolute Error:", metrics.mean_absolute_error(y_test, y_pred))
print("Mean Squared Error:", metrics.mean_squared_error(y_test, y_pred))
print("Root Mean Squared Error:", np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

# Plotting the results
plt.scatter(range(len(y_test)), y_test, color='blue', label='Actual Data')
plt.scatter(range(len(y_pred)), y_pred, color='red', label='Predicted Data')
plt.xlabel('Data Points')
plt.ylabel('Target Variable (y)')
plt.title('Multiple Linear Regression')
plt.legend()
plt.show()
